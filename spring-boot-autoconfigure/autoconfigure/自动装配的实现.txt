TODO. 自动装配bean的注入，通过文件中的声明进行指定
@SpringBootConfiguration
    > @EnableAutoConfiguration 默认开启自动装配注解
       > @Import({AutoConfigurationImportSelector.class}) 引入bean的选择器
          > spring-boot-autoconfigure-xxx.RELEASE\META-INF\spring.factories 读取文件位置
          > spring-boot-autoconfigure-xxx.RELEASE\META-INF\org.springframework.boot.autoconfigure.AutoConfiguration.imports 新版本文件位置

自动装配Import源码的实现(区别不同版本)
AutoConfigurationImportSelector >> selectImports()

org.springframework.boot.autoconfigure.AutoConfigurationImportSelector.class >>
  protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,AnnotationAttributes attributes) {
      List<String> configurations = SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration .class, this.getBeanClassLoader());
      Assert.notEmpty(configurations, "Not found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.");
      return configurations;
  }

org.springframework.core.io.support.SpringFactoriesLoader >>

  public static List<String> loadFactoryNames(Class<?> factoryType, @Nullable ClassLoader classLoader) {
    ClassLoader classLoaderToUse = classLoader;
    if (classLoader == null) {
        classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();
    }
    String factoryTypeName = factoryType.getName();
    return (List)loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());
  }

  // 将读取spring.factories的所有信息缓存到cache中，避免重复读取，减少IO提高性能
  private static Map<String, List<String>> loadSpringFactories(ClassLoader classLoader) {
    Map<String, List<String>> result = (Map)cache.get(classLoader);
       Enumeration<URL> urls = classLoader != null ?
          classLoader.getResources("META-INF/spring.factories") :
          ClassLoader.getSystemResources("META-INF/spring.factories");
       ...
       Properties properties = PropertiesLoaderUtils.loadProperties(resource);
       ...

    cache.put(classLoader, result);
  }

  // 将读取出来的factoryImplementationClass类型进行实例化，通过反射创建对象
  private static <T> T instantiateFactory(String factoryImplementationName, Class<T> factoryType, ClassLoader classLoader) {　
 　　　return ReflectionUtils.accessibleConstructor(factoryImplementationClass, new Class[0]).newInstance();
 　}